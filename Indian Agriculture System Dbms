-- Create a new database
CREATE DATABASE IndianAgriculturalSystem;
USE IndianAgriculturalSystem;

-- 1. Farmers Table
CREATE TABLE Farmers (
    FarmerID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Age INT,
    Gender VARCHAR(10),
    Region VARCHAR(50),
    Email VARCHAR(100),
    PhoneNumber VARCHAR(15)
);

-- 2. Lands Table
CREATE TABLE Lands (
    LandID INT PRIMARY KEY AUTO_INCREMENT,
    FarmerID INT,
    Size DECIMAL(10, 2),
    Location VARCHAR(100),
    FOREIGN KEY (FarmerID) REFERENCES Farmers(FarmerID)
);

-- 3. Crops Table
CREATE TABLE Crops (
    CropID INT PRIMARY KEY AUTO_INCREMENT,
    CropName VARCHAR(100) NOT NULL,
    Season VARCHAR(50),
    Yield DECIMAL(10, 2)
);

-- 4. Harvests Table
CREATE TABLE Harvests (
    HarvestID INT PRIMARY KEY AUTO_INCREMENT,
    FarmerID INT,
    CropID INT,
    Quantity DECIMAL(10, 2),
    HarvestDate DATE,
    FOREIGN KEY (FarmerID) REFERENCES Farmers(FarmerID),
    FOREIGN KEY (CropID) REFERENCES Crops(CropID)
);

-- 5. Livestock Table
CREATE TABLE Livestock (
    LivestockID INT PRIMARY KEY AUTO_INCREMENT,
    FarmerID INT,
    AnimalType VARCHAR(50),
    Count INT,
    FOREIGN KEY (FarmerID) REFERENCES Farmers(FarmerID)
);

-- 6. Fertilizers Table
CREATE TABLE Fertilizers (
    FertilizerID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Type VARCHAR(50),
    Quantity DECIMAL(10, 2)
);

-- 7. Pesticides Table
CREATE TABLE Pesticides (
    PesticideID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Type VARCHAR(50),
    Quantity DECIMAL(10, 2)
);

-- 8. Markets Table
CREATE TABLE Markets (
    MarketID INT PRIMARY KEY AUTO_INCREMENT,
    Location VARCHAR(100),
    ContactNumber VARCHAR(15)
);

-- 9. Sales Table
CREATE TABLE Sales (
    SaleID INT PRIMARY KEY AUTO_INCREMENT,
    FarmerID INT,
    CropID INT,
    Quantity DECIMAL(10, 2),
    SaleDate DATE,
    FOREIGN KEY (FarmerID) REFERENCES Farmers(FarmerID),
    FOREIGN KEY (CropID) REFERENCES Crops(CropID)
);

-- 10. Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    PhoneNumber VARCHAR(15),
    Email VARCHAR(100)
);

-- Insert data into Farmers table
INSERT INTO Farmers (Name, Age, Gender, Region, Email, PhoneNumber) VALUES 
    ('Rajesh Kumar', 34, 'Male', 'Maharashtra', 'rajesh@example.com', '9876543210'),
    ('Sita Sharma', 28, 'Female', 'Uttar Pradesh', 'sita@example.com', '9123456789'),
    ('Amit Verma', 30, 'Male', 'Haryana', 'amit@example.com', '9456781234'),
    ('Priya Singh', 25, 'Female', 'Madhya Pradesh', 'priya@example.com', '9988776655');

-- Insert data into Lands table
INSERT INTO Lands (FarmerID, Size, Location) VALUES 
    (1, 10.5, 'Pune'),
    (2, 8.0, 'Agra'),
    (3, 15.0, 'Delhi');

-- Insert data into Crops table
INSERT INTO Crops (CropName, Season, Yield) VALUES 
    ('Wheat', 'Kharif', 25.5),
    ('Rice', 'Rabi', 30.0),
    ('Sugarcane', 'Kharif', 20.0);

-- Insert data into Harvests table
INSERT INTO Harvests (FarmerID, CropID, Quantity, HarvestDate) VALUES 
    (1, 1, 2000, '2024-05-10'),
    (2, 2, 1500, '2024-06-15');

-- Insert data into Livestock table
INSERT INTO Livestock (FarmerID, AnimalType, Count) VALUES 
    (1, 'Cows', 10),
    (2, 'Goats', 5);

-- Insert data into Fertilizers table
INSERT INTO Fertilizers (Name, Type, Quantity) VALUES 
    ('Nitrogen', 'Chemical', 1000),
    ('Phosphorus', 'Organic', 500);

-- Insert data into Pesticides table
INSERT INTO Pesticides (Name, Type, Quantity) VALUES 
    ('Insecticide A', 'Insecticide', 300),
    ('Fungicide B', 'Fungicide', 200);

-- Insert data into Markets table
INSERT INTO Markets (Location, ContactNumber) VALUES 
    ('Pune Market', '1234567890'),
    ('Agra Market', '2345678901');

-- Insert data into Sales table
INSERT INTO Sales (FarmerID, CropID, Quantity, SaleDate) VALUES 
    (1, 1, 500, '2024-05-12'),
    (2, 2, 300, '2024-06-17');

-- Insert data into Customers table
INSERT INTO Customers (Name, PhoneNumber, Email) VALUES 
    ('Ravi Mehta', '9876543210', 'ravi@example.com'),
    ('Anjali Bhatia', '1234567890', 'anjali@example.com');

-- Update a farmer's contact information
UPDATE Farmers SET PhoneNumber = '9999999999' WHERE FarmerID = 1;

-- Update a crop's yield
UPDATE Crops SET Yield = 28.0 WHERE CropID = 1;

-- Delete a customer
DELETE FROM Customers WHERE CustomerID = 2;

-- Delete a farmer
DELETE FROM Farmers WHERE FarmerID = 3;

-- Select all farmers
SELECT * FROM Farmers;

-- Select all crops
SELECT * FROM Crops;

-- Select all sales records
SELECT * FROM Sales;

-- Start a transaction
START TRANSACTION;

-- Example of adding a sale and committing
INSERT INTO Sales (FarmerID, CropID, Quantity, SaleDate) VALUES (1, 1, 100, '2024-06-20');
COMMIT;

-- Example of rolling back a transaction
START TRANSACTION;
INSERT INTO Sales (FarmerID, CropID, Quantity, SaleDate) VALUES (1, 2, 200, '2024-06-21');

-- If there's an error, roll back
ROLLBACK;

-- Create a view to show farmers and their crops
CREATE VIEW FarmerCrops AS
SELECT f.Name AS FarmerName, c.CropName, h.Quantity AS HarvestedQuantity
FROM Farmers f
JOIN Harvests h ON f.FarmerID = h.FarmerID
JOIN Crops c ON h.CropID = c.CropID;

-- Select from the view
SELECT * FROM FarmerCrops;

-- To update the view
CREATE OR REPLACE VIEW FarmerCrops AS
SELECT f.Name AS FarmerName, c.CropName, SUM(h.Quantity) AS TotalHarvestedQuantity
FROM Farmers f
JOIN Harvests h ON f.FarmerID = h.FarmerID
JOIN Crops c ON h.CropID = c.CropID
GROUP BY f.Name, c.CropName;

-- Select from the modified view
SELECT * FROM FarmerCrops;

-- Aggregate Queries
-- Total harvested quantity by farmer and crop
SELECT f.Name AS FarmerName, c.CropName, SUM(h.Quantity) AS TotalHarvested
FROM Harvests h
JOIN Farmers f ON h.FarmerID = f.FarmerID
JOIN Crops c ON h.CropID = c.CropID
GROUP BY f.Name, c.CropName;

-- Farmers with significant harvests
SELECT f.Name AS FarmerName, SUM(h.Quantity) AS TotalHarvested
FROM Harvests h
JOIN Farmers f ON h.FarmerID = f.FarmerID
GROUP BY f.Name
HAVING SUM(h.Quantity) > 1000;  -- Example: more than 1000 units

-- Crops with high yield
SELECT CropName, Yield
FROM Crops
WHERE Yield > 25.0;  -- Example: yield greater than 25

-- Count of livestock for each type owned by farmers
SELECT l.AnimalType, SUM(l.Count) AS TotalCount
FROM Livestock l
GROUP BY l.AnimalType
HAVING SUM(l.Count) > 5;  -- Example: more than 5 animals

-- Sales by farmer and crop
SELECT f.Name AS FarmerName, c.CropName, SUM(s.Quantity) AS TotalSales
FROM Sales s
JOIN Farmers f ON s.FarmerID = f.FarmerID
JOIN Crops c ON s.CropID = c.CropID
GROUP BY f.Name, c.CropName
HAVING SUM(s.Quantit
